
I want to fetch all the data from qliksense app,create the qliksense mashup which prints json object of data of qliksense app on web page, write dynamic code, create the qliksense mashup able develop inside the dev-hub environment of qiksense and should use javascript, jquery, html,css , you can use qliksense api, capability APi to fetch data
<!DOCTYPE html>
<html>
<head>
    <title>Qlik Sense Data Mashup</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        #json-display {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-wrap;
            max-height: 80vh;
            overflow-y: auto;
            font-family: monospace;
        }
        button {
            padding: 10px 15px;
            background-color: #0088cc;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 10px;
        }
        button:hover { background-color: #005580; }
        .loading {
            color: #666;
            font-style: italic;
        }
        .error {
            color: #d9534f;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Qlik Sense Data Export</h1>
    <button id="fetch-data">Fetch All Data</button>
    <div id="json-display">Click the button to fetch data...</div>

    <script>
        // Configuration - Update with your app ID
        const APP_ID = "your-app-id"; // Replace with your actual app ID

        $(document).ready(function() {
            require(["qlik"], function(qlik) {
                let app;

                // Open Qlik app
                qlik.openApp(APP_ID).then(function(qlikApp) {
                    app = qlikApp;
                    console.log("App opened successfully");
                }).catch(function(error) {
                    console.error("Error opening app:", error);
                    $("#json-display").html(`<div class="error">Error: ${error.message}</div>`);
                });

                // Fetch data on button click
                $("#fetch-data").click(async function() {
                    try {
                        $("#json-display").html('<div class="loading">Fetching data...</div>');
                        const jsonData = await fetchAllData();
                        $("#json-display").text(JSON.stringify(jsonData, null, 2));
                    } catch (error) {
                        console.error("Error fetching data:", error);
                        $("#json-display").html(`<div class="error">Error: ${error.message}</div>`);
                    }
                });

                // Function to fetch all data
                async function fetchAllData() {
                    try {
                        // Get all fields in the app using the current API
                        const fieldList = await app.getList("field");
                        const fieldNames = fieldList.qFieldList.qItems.map(item => item.qName);
                        
                        if (fieldNames.length === 0) {
                            throw new Error("No fields found in the app");
                        }

                        console.log("Found fields:", fieldNames);

                        // Create hypercube definition
                        const hypercubeDef = {
                            qDimensions: fieldNames.map(field => ({
                                qDimension: {
                                    qDef: {
                                        qFieldDefs: [field]
                                    }
                                }
                            })),
                            qMeasures: [],
                            qInitialDataFetch: [{
                                qWidth: fieldNames.length,
                                qHeight: 1000 // Adjust based on your data size
                            }]
                        };

                        // Create generic object
                        const genericObject = await app.createGenericObject({
                            qHyperCubeDef: hypercubeDef
                        });

                        // Get full hypercube data
                        const layout = await genericObject.getLayout();
                        const data = await genericObject.getFullHyperCubeData(
                            '/qHyperCubeDef', 
                            layout.qHyperCube.qSize.qcy, 
                            layout.qHyperCube.qSize.qcx
                        );

                        // Convert to array of objects
                        return data.qMatrix.map(row => {
                            const obj = {};
                            fieldNames.forEach((field, index) => {
                                obj[field] = row[index].qText;
                            });
                            return obj;
                        });
                    } catch (error) {
                        console.error("Error in fetchAllData:", error);
                        throw error;
                    }
                }
            });
        });
    </script>
</body>
</html>
