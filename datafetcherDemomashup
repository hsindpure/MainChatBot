<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QlikSense Data Fetcher</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .input-group {
            margin-bottom: 20px;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .input-group input {
            width: 300px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-right: 10px;
        }
        
        .btn:hover {
            background: #0056b3;
        }
        
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .status {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            display: none;
        }
        
        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .status.info {
            background: #cce7ff;
            color: #004085;
            border: 1px solid #b8daff;
        }
        
        .json-output {
            background: #1e1e1e;
            color: #f8f8f2;
            padding: 20px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            white-space: pre-wrap;
            word-wrap: break-word;
            max-height: 600px;
            overflow-y: auto;
            margin-top: 20px;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>QlikSense Data Fetcher</h2>
        
        <div class="input-group">
            <label for="appId">App ID:</label>
            <input type="text" id="appId" placeholder="Enter QlikSense App ID">
        </div>
        
        <button class="btn" id="fetchAllDataBtn">Fetch All Data</button>
        <button class="btn" id="clearBtn">Clear</button>
        
        <div class="status" id="statusMessage"></div>
        
        <div class="json-output" id="jsonOutput">Click "Fetch All Data" to load QlikSense data...</div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script>
        class QlikSenseDataFetcher {
            constructor() {
                this.app = null;
                this.qlik = null;
                this.isConnected = false;
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadQlikSenseAPI();
            }

            setupEventListeners() {
                $('#fetchAllDataBtn').on('click', () => this.fetchAllData());
                $('#clearBtn').on('click', () => this.clearOutput());
            }

            loadQlikSenseAPI() {
                // Check if running in QlikSense environment
                if (typeof require !== 'undefined' && typeof config !== 'undefined') {
                    try {
                        require.config({
                            baseUrl: (config.isSecure ? "https://" : "http://") + config.host + 
                                    (config.port ? ":" + config.port : "") + config.prefix + "resources"
                        });

                        require(['js/qlik'], (qlik) => {
                            this.qlik = qlik;
                            this.isConnected = true;
                            this.showStatus('QlikSense API loaded successfully', 'success');
                        });
                    } catch (error) {
                        this.showStatus('Error loading QlikSense API: ' + error.message, 'error');
                        this.setupDemoMode();
                    }
                } else {
                    this.showStatus('Running in demo mode - QlikSense API not available', 'info');
                    this.setupDemoMode();
                }
            }

            setupDemoMode() {
                // Demo data for testing outside QlikSense
                this.demoData = {
                    appMetadata: {
                        id: 'demo-app-123',
                        name: 'Demo Sales Application',
                        description: 'Sample QlikSense application',
                        created: '2024-01-01T10:00:00Z',
                        modified: '2024-01-15T14:30:00Z',
                        owner: 'demo-user'
                    },
                    objects: [
                        { id: 'chart-001', type: 'barchart', title: 'Sales by Region', published: true },
                        { id: 'table-001', type: 'table', title: 'Customer Details', published: true },
                        { id: 'filter-001', type: 'listbox', title: 'Date Filter', published: false },
                        { id: 'kpi-001', type: 'kpi', title: 'Total Revenue', published: true }
                    ],
                    fields: [
                        { name: 'CustomerID', type: 'key', tags: ['$key'] },
                        { name: 'CustomerName', type: 'text', tags: ['$text'] },
                        { name: 'Region', type: 'text', tags: ['$text'] },
                        { name: 'SalesAmount', type: 'numeric', tags: ['$numeric'] },
                        { name: 'OrderDate', type: 'date', tags: ['$date'] },
                        { name: 'ProductCategory', type: 'text', tags: ['$text'] }
                    ],
                    dimensions: [
                        { name: 'Customer Dimension', field: 'CustomerName', grouping: 'N' },
                        { name: 'Region Dimension', field: 'Region', grouping: 'N' },
                        { name: 'Date Dimension', field: 'OrderDate', grouping: 'N' },
                        { name: 'Product Category', field: 'ProductCategory', grouping: 'N' }
                    ],
                    measures: [
                        { name: 'Total Sales', expression: 'Sum(SalesAmount)', label: 'Total Sales ($)' },
                        { name: 'Average Sales', expression: 'Avg(SalesAmount)', label: 'Average Sales ($)' },
                        { name: 'Sales Count', expression: 'Count(SalesAmount)', label: 'Number of Sales' },
                        { name: 'Max Sales', expression: 'Max(SalesAmount)', label: 'Maximum Sale ($)' }
                    ],
                    hypercubeData: {
                        dimensions: ['CustomerName', 'Region', 'ProductCategory'],
                        measures: ['Sum(SalesAmount)', 'Count(SalesAmount)'],
                        data: [
                            ['ABC Corp', 'North', 'Electronics', 15000, 5],
                            ['XYZ Ltd', 'South', 'Clothing', 8500, 3],
                            ['DEF Inc', 'East', 'Electronics', 12000, 4],
                            ['GHI Co', 'West', 'Sports', 6200, 2],
                            ['JKL Partners', 'North', 'Home', 9800, 6],
                            ['MNO Systems', 'South', 'Electronics', 18500, 7],
                            ['PQR Industries', 'East', 'Clothing', 11200, 4],
                            ['STU Enterprises', 'West', 'Sports', 7400, 3],
                            ['VWX Solutions', 'North', 'Home', 13600, 5],
                            ['YZA Corp', 'South', 'Electronics', 16800, 6]
                        ],
                        totalRecords: 10,
                        totalPages: 1
                    }
                };
            }

            async fetchAllData() {
                const appId = $('#appId').val().trim();
                if (!appId) {
                    this.showStatus('Please enter an App ID', 'error');
                    return;
                }

                this.showLoading();
                
                try {
                    let allData = {};
                    
                    if (this.qlik && this.isConnected) {
                        // Real QlikSense API calls
                        await this.connectToApp(appId);
                        allData = await this.fetchRealData();
                    } else {
                        // Demo mode
                        await this.simulateDelay(1500);
                        allData = this.demoData;
                    }

                    this.displayData(allData);
                    this.showStatus('All data fetched successfully', 'success');
                    
                } catch (error) {
                    this.showStatus('Error fetching data: ' + error.message, 'error');
                    $('#jsonOutput').text('Error occurred while fetching data');
                }
            }

            async connectToApp(appId) {
                try {
                    this.app = this.qlik.openApp(appId);
                    // Wait for app to be ready
                    await new Promise((resolve, reject) => {
                        this.app.model.waitForOpen.promise.then(resolve).catch(reject);
                    });
                } catch (error) {
                    throw new Error('Failed to connect to app: ' + error.message);
                }
            }

            async fetchRealData() {
                const allData = {};
                
                try {
                    // Fetch app metadata
                    allData.appMetadata = await this.app.getAppLayout();
                    
                    // Fetch all objects
                    allData.objects = await this.app.getAppObjectList();
                    
                    // Fetch all fields
                    const fieldList = await this.app.getList('FieldList');
                    allData.fields = fieldList.qFieldList ? fieldList.qFieldList.qItems : [];
                    
                    // Fetch all dimensions
                    const dimensionList = await this.app.getList('DimensionList');
                    allData.dimensions = dimensionList.qDimensionList ? dimensionList.qDimensionList.qItems : [];
                    
                    // Fetch all measures
                    const measureList = await this.app.getList('MeasureList');
                    allData.measures = measureList.qMeasureList ? measureList.qMeasureList.qItems : [];
                    
                    // Fetch hypercube data (create a simple cube with available dimensions and measures)
                    allData.hypercubeData = await this.fetchHypercubeData();
                    
                } catch (error) {
                    throw new Error('Failed to fetch data: ' + error.message);
                }
                
                return allData;
            }

            async fetchHypercubeData() {
                try {
                    // Create a simple hypercube with first few dimensions and measures
                    const hypercubeDef = {
                        qInitialDataFetch: [{
                            qTop: 0,
                            qLeft: 0,
                            qHeight: 100,
                            qWidth: 10
                        }],
                        qDimensions: [],
                        qMeasures: [],
                        qSuppressZero: false,
                        qSuppressMissing: false
                    };

                    // Add some dimensions if available
                    const fieldList = await this.app.getList('FieldList');
                    if (fieldList.qFieldList && fieldList.qFieldList.qItems.length > 0) {
                        const textFields = fieldList.qFieldList.qItems.filter(f => f.qTags.includes('$text')).slice(0, 2);
                        textFields.forEach(field => {
                            hypercubeDef.qDimensions.push({
                                qDef: { qFieldDefs: [field.qName] },
                                qNullSuppression: false
                            });
                        });
                    }

                    // Add some measures if available
                    const numericFields = fieldList.qFieldList ? fieldList.qFieldList.qItems.filter(f => f.qTags.includes('$numeric')).slice(0, 2) : [];
                    numericFields.forEach(field => {
                        hypercubeDef.qMeasures.push({
                            qDef: { qDef: `Sum([${field.qName}])` },
                            qLabel: `Sum of ${field.qName}`
                        });
                    });

                    // If no fields available, create a simple count measure
                    if (hypercubeDef.qMeasures.length === 0) {
                        hypercubeDef.qMeasures.push({
                            qDef: { qDef: 'Count(*)' },
                            qLabel: 'Total Count'
                        });
                    }

                    const cubeObj = await this.app.createCube(hypercubeDef);
                    const layout = await cubeObj.getLayout();
                    
                    return {
                        dimensions: layout.qHyperCube.qDimensionInfo.map(d => d.qFallbackTitle),
                        measures: layout.qHyperCube.qMeasureInfo.map(m => m.qFallbackTitle),
                        data: layout.qHyperCube.qDataPages[0] ? layout.qHyperCube.qDataPages[0].qMatrix : [],
                        totalRecords: layout.qHyperCube.qSize.qcy,
                        totalPages: Math.ceil(layout.qHyperCube.qSize.qcy / 100)
                    };
                    
                } catch (error) {
                    return {
                        error: 'Could not create hypercube: ' + error.message,
                        dimensions: [],
                        measures: [],
                        data: [],
                        totalRecords: 0
                    };
                }
            }

            async simulateDelay(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            displayData(data) {
                const formattedJson = JSON.stringify(data, null, 2);
                $('#jsonOutput').text(formattedJson);
            }

            showLoading() {
                $('#jsonOutput').html('<div class="loading">Loading all QlikSense data...</div>');
                $('#fetchAllDataBtn').prop('disabled', true);
            }

            showStatus(message, type) {
                const statusElement = $('#statusMessage');
                statusElement.removeClass('success error info').addClass(type);
                statusElement.text(message);
                statusElement.show();
                
                setTimeout(() => {
                    statusElement.fadeOut();
                }, 5000);
            }

            clearOutput() {
                $('#jsonOutput').text('Click "Fetch All Data" to load QlikSense data...');
                $('#fetchAllDataBtn').prop('disabled', false);
            }
        }

        // Initialize when document is ready
        $(document).ready(function() {
            new QlikSenseDataFetcher();
        });
    </script>
</body>
</html>
