html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QlikSense Data Explorer - JSON Mashup</title>
    
    <!-- Bootstrap CSS for UI components -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom styles -->
    <link rel="stylesheet" href="styles.css">
    
    <!-- QlikSense styles - will be dynamically loaded -->
    <link id="qlik-styles" rel="stylesheet" href="">
    
    <!-- RequireJS -->
    <script id="requirejs-script" src=""></script>
</head>
<body>
    <div class="container-fluid">
        <!-- Header -->
        <nav class="navbar navbar-dark bg-dark mb-4">
            <div class="container-fluid">
                <span class="navbar-brand mb-0 h1">
                    <i class="fas fa-database me-2"></i>
                    QlikSense Data Explorer
                </span>
                <div class="d-flex align-items-center">
                    <span id="connection-status" class="badge bg-secondary me-3">
                        <i class="fas fa-circle-notch fa-spin me-1"></i>
                        Connecting...
                    </span>
                    <button id="refresh-btn" class="btn btn-outline-light btn-sm" disabled>
                        <i class="fas fa-sync-alt me-1"></i>
                        Refresh
                    </button>
                </div>
            </div>
        </nav>

        <!-- Configuration Panel -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-cog me-2"></i>
                            Connection Configuration
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <label for="qlik-host" class="form-label">QlikSense Host</label>
                                <input type="text" class="form-control" id="qlik-host" 
                                       placeholder="your-tenant.qlikcloud.com">
                            </div>
                            <div class="col-md-3">
                                <label for="web-integration-id" class="form-label">Web Integration ID</label>
                                <input type="text" class="form-control" id="web-integration-id" 
                                       placeholder="Enter Web Integration ID">
                            </div>
                            <div class="col-md-3">
                                <label for="app-id" class="form-label">App ID</label>
                                <input type="text" class="form-control" id="app-id" 
                                       placeholder="Enter QlikSense App ID">
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button id="connect-btn" class="btn btn-primary w-100">
                                    <i class="fas fa-plug me-1"></i>
                                    Connect
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="row">
            <!-- Sidebar - Object List -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            Data Objects
                            <span id="object-count" class="badge bg-primary ms-2">0</span>
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <!-- Search and Filter -->
                        <div class="p-3 border-bottom">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" id="search-objects" 
                                       placeholder="Search objects...">
                            </div>
                            <div class="mt-2">
                                <select class="form-select form-select-sm" id="filter-type">
                                    <option value="">All Types</option>
                                    <option value="sheet">Sheets</option>
                                    <option value="visualization">Visualizations</option>
                                    <option value="hypercube">Hypercubes</option>
                                    <option value="listbox">Listboxes</option>
                                    <option value="table">Tables</option>
                                    <option value="field">Fields</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Object List -->
                        <div id="object-list" class="list-group list-group-flush" style="max-height: 600px; overflow-y: auto;">
                            <div class="list-group-item text-center text-muted">
                                <i class="fas fa-info-circle me-2"></i>
                                Connect to an app to see objects
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Panel - JSON Display -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-code me-2"></i>
                            JSON Data
                            <span id="selected-object-name" class="text-muted ms-2"></span>
                        </h5>
                        <div class="btn-group btn-group-sm">
                            <button id="copy-json-btn" class="btn btn-outline-secondary" disabled>
                                <i class="fas fa-copy me-1"></i>
                                Copy
                            </button>
                            <button id="download-json-btn" class="btn btn-outline-secondary" disabled>
                                <i class="fas fa-download me-1"></i>
                                Download
                            </button>
                            <button id="prettify-btn" class="btn btn-outline-secondary" disabled>
                                <i class="fas fa-indent me-1"></i>
                                Format
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="json-container" class="p-3" style="min-height: 400px; max-height: 700px; overflow: auto;">
                            <div class="text-center text-muted">
                                <i class="fas fa-mouse-pointer fa-2x mb-3"></i>
                                <p>Select an object from the list to view its JSON data</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Overlay -->
                <div id="loading-overlay" class="position-absolute top-0 start-0 w-100 h-100 d-none" 
                     style="background: rgba(255,255,255,0.8); z-index: 1000;">
                    <div class="d-flex justify-content-center align-items-center h-100">
                        <div class="text-center">
                            <div class="spinner-border text-primary mb-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>Loading data...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error Modal -->
        <div class="modal fade" id="error-modal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="error-message"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Main application script -->
    <script src="index.js"></script>
</body>
</html>




js

/**
 * QlikSense Data Explorer Mashup
 * Dynamically fetches and displays all data from QlikSense apps as formatted JSON
 */

class QlikSenseDataExplorer {
    constructor() {
        this.qlik = null;
        this.app = null;
        this.config = null;
        this.objects = [];
        this.currentObject = null;
        this.isConnected = false;
        
        this.init();
    }

    init() {
        this.bindEvents();
        this.loadDefaultConfig();
    }

    loadDefaultConfig() {
        // Load default configuration from environment or localStorage
        const defaultHost = localStorage.getItem('qlik-host') || '';
        const defaultWebIntegrationId = localStorage.getItem('web-integration-id') || '';
        const defaultAppId = localStorage.getItem('app-id') || '';

        document.getElementById('qlik-host').value = defaultHost;
        document.getElementById('web-integration-id').value = defaultWebIntegrationId;
        document.getElementById('app-id').value = defaultAppId;
    }

    bindEvents() {
        // Connection events
        document.getElementById('connect-btn').addEventListener('click', () => this.connect());
        document.getElementById('refresh-btn').addEventListener('click', () => this.refreshObjects());

        // Search and filter events
        document.getElementById('search-objects').addEventListener('input', (e) => this.filterObjects(e.target.value));
        document.getElementById('filter-type').addEventListener('change', (e) => this.filterByType(e.target.value));

        // JSON actions
        document.getElementById('copy-json-btn').addEventListener('click', () => this.copyJson());
        document.getElementById('download-json-btn').addEventListener('click', () => this.downloadJson());
        document.getElementById('prettify-btn').addEventListener('click', () => this.prettifyJson());

        // Enter key on inputs to connect
        ['qlik-host', 'web-integration-id', 'app-id'].forEach(id => {
            document.getElementById(id).addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.connect();
            });
        });
    }

    async connect() {
        const host = document.getElementById('qlik-host').value.trim();
        const webIntegrationId = document.getElementById('web-integration-id').value.trim();
        const appId = document.getElementById('app-id').value.trim();

        if (!host || !webIntegrationId || !appId) {
            this.showError('Please fill in all connection fields');
            return;
        }

        // Save to localStorage
        localStorage.setItem('qlik-host', host);
        localStorage.setItem('web-integration-id', webIntegrationId);
        localStorage.setItem('app-id', appId);

        this.updateConnectionStatus('Connecting...', 'warning');
        document.getElementById('connect-btn').disabled = true;

        try {
            await this.initializeQlik(host, webIntegrationId, appId);
            this.updateConnectionStatus('Connected', 'success');
            this.isConnected = true;
            document.getElementById('refresh-btn').disabled = false;
            await this.loadAllObjects();
        } catch (error) {
            this.updateConnectionStatus('Connection Failed', 'danger');
            this.showError(`Connection failed: ${error.message}`);
            console.error('Connection error:', error);
        } finally {
            document.getElementById('connect-btn').disabled = false;
        }
    }

    initializeQlik(host, webIntegrationId, appId) {
        return new Promise((resolve, reject) => {
            // Configure QlikSense connection
            this.config = {
                host: host,
                prefix: "/",
                port: 443,
                isSecure: true,
                webIntegrationId: webIntegrationId
            };

            // Set up RequireJS configuration
            if (typeof require !== 'undefined' && require.config) {
                require.config({
                    baseUrl: `https://${host}/resources`,
                    webIntegrationId: webIntegrationId
                });
            } else {
                // Load RequireJS and QlikSense resources
                const requireScript = document.getElementById('requirejs-script');
                const qlikStyles = document.getElementById('qlik-styles');
                
                requireScript.src = `https://${host}/resources/assets/external/requirejs/require.js`;
                qlikStyles.href = `https://${host}/resources/autogenerated/qlik-styles.css`;

                requireScript.onload = () => {
                    require.config({
                        baseUrl: `https://${host}/resources`,
                        webIntegrationId: webIntegrationId
                    });

                    this.loadQlikModule(appId, resolve, reject);
                };

                requireScript.onerror = () => {
                    reject(new Error('Failed to load RequireJS from QlikSense server'));
                };

                return;
            }

            this.loadQlikModule(appId, resolve, reject);
        });
    }

    loadQlikModule(appId, resolve, reject) {
        require(["js/qlik"], (qlik) => {
            this.qlik = qlik;

            // Set up error handling
            qlik.on("error", (error) => {
                console.error('Qlik error:', error);
                this.showError(`QlikSense error: ${error.message || 'Unknown error'}`);
            });

            // Open the app
            this.app = qlik.openApp(appId, this.config);
            
            // Test connection by getting app info
            this.app.getAppLayout().then(() => {
                resolve();
            }).catch(reject);
        }, (error) => {
            reject(new Error('Failed to load QlikSense JavaScript API'));
        });
    }

    async loadAllObjects() {
        this.showLoading(true);
        this.objects = [];

        try {
            // Get app layout to extract basic info
            const appLayout = await this.app.getAppLayout();
            
            // Get all sheets
            const sheets = await this.app.getList('sheet');
            
            // Get all fields
            const fields = await this.app.getList('FieldList');
            
            // Get all master objects
            const masterObjects = await this.app.getList('masterobject');

            // Process sheets and their objects
            for (const sheet of sheets.qAppObjectList.qItems) {
                await this.processSheet(sheet);
            }

            // Process fields
            if (fields.qFieldList) {
                for (const field of fields.qFieldList.qItems) {
                    this.objects.push({
                        id: field.qName,
                        name: field.qName,
                        type: 'field',
                        title: `Field: ${field.qName}`,
                        tags: field.qTags || [],
                        data: field
                    });
                }
            }

            // Process master objects
            if (masterObjects.qAppObjectList) {
                for (const masterObj of masterObjects.qAppObjectList.qItems) {
                    this.objects.push({
                        id: masterObj.qInfo.qId,
                        name: masterObj.qMeta.title || masterObj.qInfo.qId,
                        type: 'masterobject',
                        title: `Master Object: ${masterObj.qMeta.title || masterObj.qInfo.qId}`,
                        tags: masterObj.qMeta.tags || [],
                        data: masterObj
                    });
                }
            }

            // Add app info object
            this.objects.unshift({
                id: 'app-info',
                name: 'App Information',
                type: 'app',
                title: `App: ${appLayout.qTitle}`,
                tags: [],
                data: appLayout
            });

            this.renderObjectList();
            this.updateObjectCount();

        } catch (error) {
            console.error('Error loading objects:', error);
            this.showError(`Failed to load objects: ${error.message}`);
        } finally {
            this.showLoading(false);
        }
    }

    async processSheet(sheet) {
        try {
            // Add sheet itself
            this.objects.push({
                id: sheet.qInfo.qId,
                name: sheet.qMeta.title || sheet.qInfo.qId,
                type: 'sheet',
                title: `Sheet: ${sheet.qMeta.title || sheet.qInfo.qId}`,
                tags: sheet.qMeta.tags || [],
                data: sheet
            });

            // Get sheet layout to find child objects
            const sheetObj = await this.app.getObject(sheet.qInfo.qId);
            const sheetLayout = await sheetObj.getLayout();

            if (sheetLayout.cells) {
                for (const cell of sheetLayout.cells) {
                    if (cell.name) {
                        try {
                            const childObj = await this.app.getObject(cell.name);
                            const childLayout = await childObj.getLayout();
                            
                            this.objects.push({
                                id: cell.name,
                                name: childLayout.qMeta?.title || childLayout.title || cell.name,
                                type: 'visualization',
                                title: `Visualization: ${childLayout.qMeta?.title || childLayout.title || cell.name}`,
                                tags: childLayout.qMeta?.tags || [],
                                parentSheet: sheet.qMeta.title || sheet.qInfo.qId,
                                data: childLayout
                            });
                        } catch (error) {
                            console.warn(`Could not load object ${cell.name}:`, error);
                        }
                    }
                }
            }
        } catch (error) {
            console.warn(`Could not process sheet ${sheet.qInfo.qId}:`, error);
        }
    }

    renderObjectList() {
        const objectList = document.getElementById('object-list');
        const searchTerm = document.getElementById('search-objects').value.toLowerCase();
        const typeFilter = document.getElementById('filter-type').value;

        let filteredObjects = this.objects;

        // Apply search filter
        if (searchTerm) {
            filteredObjects = filteredObjects.filter(obj => 
                obj.name.toLowerCase().includes(searchTerm) ||
                obj.title.toLowerCase().includes(searchTerm) ||
                obj.type.toLowerCase().includes(searchTerm)
            );
        }

        // Apply type filter
        if (typeFilter) {
            filteredObjects = filteredObjects.filter(obj => obj.type === typeFilter);
        }

        objectList.innerHTML = '';

        if (filteredObjects.length === 0) {
            objectList.innerHTML = `
                <div class="list-group-item text-center text-muted">
                    <i class="fas fa-search me-2"></i>
                    No objects found
                </div>
            `;
            return;
        }

        filteredObjects.forEach(obj => {
            const item = document.createElement('div');
            item.className = 'list-group-item list-group-item-action';
            item.innerHTML = `
                <div class="d-flex w-100 justify-content-between">
                    <h6 class="mb-1">${this.escapeHtml(obj.name)}</h6>
                    <small class="text-muted">${this.getTypeIcon(obj.type)} ${obj.type}</small>
                </div>
                <p class="mb-1 text-muted small">${this.escapeHtml(obj.title)}</p>
                ${obj.parentSheet ? `<small class="text-info">Sheet: ${this.escapeHtml(obj.parentSheet)}</small>` : ''}
            `;

            item.addEventListener('click', () => this.selectObject(obj));
            objectList.appendChild(item);
        });
    }

    getTypeIcon(type) {
        const icons = {
            'app': 'fas fa-database',
            'sheet': 'fas fa-table',
            'visualization': 'fas fa-chart-bar',
            'field': 'fas fa-tag',
            'masterobject': 'fas fa-star',
            'hypercube': 'fas fa-cube',
            'listbox': 'fas fa-list',
            'table': 'fas fa-th'
        };
        return `<i class="${icons[type] || 'fas fa-question-circle'}"></i>`;
    }

    async selectObject(obj) {
        this.currentObject = obj;
        this.showLoading(true);

        try {
            let detailedData = obj.data;

            // Get more detailed data based on object type
            if (obj.type === 'visualization' || obj.type === 'masterobject') {
                try {
                    const qlikObj = await this.app.getObject(obj.id);
                    const layout = await qlikObj.getLayout();
                    const properties = await qlikObj.getProperties();
                    
                    detailedData = {
                        layout: layout,
                        properties: properties,
                        metadata: obj.data
                    };

                    // Try to get hypercube data if available
                    if (layout.qHyperCube) {
                        detailedData.hypercubeData = layout.qHyperCube;
                    }

                    // Try to get list object data if available
                    if (layout.qListObject) {
                        detailedData.listData = layout.qListObject;
                    }
                } catch (error) {
                    console.warn(`Could not get detailed data for ${obj.id}:`, error);
                }
            } else if (obj.type === 'field') {
                try {
                    // Get field values
                    const fieldData = await this.app.createList({
                        qDef: {
                            qFieldDefs: [obj.id]
                        },
                        qInitialDataFetch: [{
                            qTop: 0,
                            qLeft: 0,
                            qHeight: 100,
                            qWidth: 1
                        }]
                    });

                    const layout = await fieldData.getLayout();
                    detailedData = {
                        fieldInfo: obj.data,
                        values: layout.qListObject
                    };
                } catch (error) {
                    console.warn(`Could not get field data for ${obj.id}:`, error);
                }
            }

            this.displayJson(detailedData, obj.name);
            this.updateSelectedObjectName(obj.name);
            this.enableJsonActions();

        } catch (error) {
            console.error('Error selecting object:', error);
            this.showError(`Failed to load object data: ${error.message}`);
        } finally {
            this.showLoading(false);
        }
    }

    displayJson(data, objectName) {
        const container = document.getElementById('json-container');
        const jsonString = JSON.stringify(data, null, 2);
        
        container.innerHTML = `
            <pre class="json-content" style="margin: 0; white-space: pre-wrap; word-wrap: break-word;">
                <code class="language-json">${this.escapeHtml(jsonString)}</code>
            </pre>
        `;

        // Add syntax highlighting if available
        this.applySyntaxHighlighting();
    }

    applySyntaxHighlighting() {
        // Simple JSON syntax highlighting
        const jsonContent = document.querySelector('.json-content code');
        if (jsonContent) {
            let html = jsonContent.innerHTML;
            
            // Highlight strings
            html = html.replace(/"([^"\\]*(\\.[^"\\]*)*)"/g, '<span style="color: #0080c7;">"$1"</span>');
            
            // Highlight numbers
            html = html.replace(/\b(-?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)\b/g, '<span style="color: #0080c7;">$1</span>');
            
            // Highlight booleans and null
            html = html.replace(/\b(true|false|null)\b/g, '<span style="color: #0080c7; font-weight: bold;">$1</span>');
            
            // Highlight object keys
            html = html.replace(/("[\w$]+")(\s*:)/g, '<span style="color: #d73a49; font-weight: bold;">$1</span>$2');
            
            jsonContent.innerHTML = html;
        }
    }

    filterObjects(searchTerm) {
        this.renderObjectList();
    }

    filterByType(type) {
        this.renderObjectList();
    }

    copyJson() {
        const jsonContent = document.querySelector('.json-content');
        if (jsonContent) {
            const text = jsonContent.textContent;
            navigator.clipboard.writeText(text).then(() => {
                this.showToast('JSON copied to clipboard');
            }).catch(err => {
                console.error('Failed to copy:', err);
                this.showError('Failed to copy JSON to clipboard');
            });
        }
    }

    downloadJson() {
        if (this.currentObject) {
            const jsonContent = document.querySelector('.json-content');
            if (jsonContent) {
                const text = jsonContent.textContent;
                const blob = new Blob([text], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                
                const a = document.createElement('a');
                a.href = url;
                a.download = `${this.currentObject.name}-data.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                
                this.showToast('JSON file downloaded');
            }
        }
    }

    prettifyJson() {
        if (this.currentObject && this.currentObject.data) {
            const prettyJson = JSON.stringify(this.currentObject.data, null, 4);
            const container = document.getElementById('json-container');
            container.innerHTML = `
                <pre class="json-content" style="margin: 0; white-space: pre-wrap; word-wrap: break-word;">
                    <code class="language-json">${this.escapeHtml(prettyJson)}</code>
                </pre>
            `;
            this.applySyntaxHighlighting();
            this.showToast('JSON formatted');
        }
    }

    refreshObjects() {
        if (this.isConnected) {
            this.loadAllObjects();
        }
    }

    updateConnectionStatus(message, type) {
        const statusElement = document.getElementById('connection-status');
        statusElement.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-circle' : 'circle-notch fa-spin'} me-1"></i>
            ${message}
        `;
        statusElement.className = `badge bg-${type}`;
    }

    updateObjectCount() {
        document.getElementById('object-count').textContent = this.objects.length;
    }

    updateSelectedObjectName(name) {
        document.getElementById('selected-object-name').textContent = `- ${name}`;
    }

    enableJsonActions() {
        document.getElementById('copy-json-btn').disabled = false;
        document.getElementById('download-json-btn').disabled = false;
        document.getElementById('prettify-btn').disabled = false;
    }

    showLoading(show) {
        const overlay = document.getElementById('loading-overlay');
        overlay.classList.toggle('d-none', !show);
    }

    showError(message) {
        document.getElementById('error-message').textContent = message;
        const modal = new bootstrap.Modal(document.getElementById('error-modal'));
        modal.show();
    }

    showToast(message) {
        // Simple toast notification
        const toast = document.createElement('div');
        toast.className = 'position-fixed top-0 end-0 m-3 alert alert-success alert-dismissible fade show';
        toast.style.zIndex = '9999';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new QlikSenseDataExplorer();
});


css

/* QlikSense Data Explorer - Custom Styles */

/* Global Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
}

/* Navigation */
.navbar-brand {
    font-weight: 600;
}

/* Cards */
.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.5rem;
}

.card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    font-weight: 600;
}

/* Object List */
#object-list {
    background-color: white;
}

.list-group-item-action {
    transition: all 0.2s ease-in-out;
}

.list-group-item-action:hover {
    background-color: #f8f9fa;
    transform: translateX(2px);
}

.list-group-item.active {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

/* JSON Display */
.json-content {
    font-family: 'Courier New', Monaco, 'Lucida Console', monospace;
    font-size: 0.875rem;
    line-height: 1.4;
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 0.375rem;
    padding: 1rem;
    margin: 0;
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow-x: auto;
}

.json-content code {
    background: none;
    padding: 0;
    color: #212529;
}

/* Loading States */
.spinner-border {
    width: 2rem;
    height: 2rem;
}

/* Connection Status */
.badge {
    font-size: 0.8rem;
    padding: 0.5rem 0.75rem;
}

/* Form Inputs */
.form-control:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.form-select:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

/* Buttons */
.btn {
    border-radius: 0.375rem;
    font-weight: 500;
    transition: all 0.15s ease-in-out;
}

.btn:disabled {
    opacity: 0.65;
    cursor: not-allowed;
}

.btn-group .btn {
    border-radius: 0;
}

.btn-group .btn:first-child {
    border-top-left-radius: 0.375rem;
    border-bottom-left-radius: 0.375rem;
}

.btn-group .btn:last-child {
    border-top-right-radius: 0.375rem;
    border-bottom-right-radius: 0.375rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    .col-md-4,
    .col-md-8 {
        margin-bottom: 1rem;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .json-content {
        font-size: 0.75rem;
        padding: 0.75rem;
    }
    
    .btn-group {
        display: flex;
        flex-direction: column;
        width: 100%;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem !important;
        margin-bottom: 0.25rem;
    }
    
    .btn-group .btn:last-child {
        margin-bottom: 0;
    }
}

@media (max-width: 576px) {
    .container-fluid {
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }
    
    .navbar {
        padding: 0.5rem;
    }
    
    .card-header h5 {
        font-size: 1rem;
    }
    
    .json-content {
        font-size: 0.7rem;
        padding: 0.5rem;
    }
    
    .badge {
        font-size: 0.7rem;
        padding: 0.25rem 0.5rem;
    }
}

/* Animation */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.list-group-item {
    animation: fadeIn 0.3s ease-in-out;
}

/* JSON Syntax Highlighting */
.json-content .json-string {
    color: #0086b3;
}

.json-content .json-number {
    color: #0086b3;
}

.json-content .json-boolean {
    color: #a71d5d;
    font-weight: bold;
}

.json-content .json-null {
    color: #a71d5d;
    font-weight: bold;
}

.json-content .json-key {
    color: #795da3;
    font-weight: bold;
}

/* Error States */
.text-danger {
    color: #dc3545 !important;
}

.text-warning {
    color: #ffc107 !important;
}

.text-success {
    color: #198754 !important;
}

/* Modal Styles */
.modal-content {
    border: none;
    border-radius: 0.5rem;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.modal-header {
    border-bottom: 1px solid #e9ecef;
    border-radius: 0.5rem 0.5rem 0 0;
}

.modal-footer {
    border-top: 1px solid #e9ecef;
    border-radius: 0 0 0.5rem 0.5rem;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Custom Loading Overlay */
#loading-overlay {
    backdrop-filter: blur(2px);
}

/* Print Styles */
@media print {
    .navbar,
    .card-header,
    .btn-group,
    #loading-overlay {
        display: none !important;
    }
    
    .json-content {
        background: white !important;
        border: 1px solid #000 !important;
        font-size: 10pt;
    }
    
    .card {
        box-shadow: none;
        border: 1px solid #000;
    }
}

/* Accessibility */
.btn:focus,
.form-control:focus,
.form-select:focus {
    outline: 2px solid #0d6efd;
    outline-offset: 2px;
}

.list-group-item-action:focus {
    outline: 2px solid #0d6efd;
    outline-offset: -2px;
}

/* High Contrast Mode Support */
@media (prefers-contrast: high) {
    .card {
        border: 2px solid #000;
    }
    
    .json-content {
        border: 2px solid #000;
        background: #fff;
    }
    
    .list-group-item {
        border: 1px solid #000;
    }
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}
