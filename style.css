define([
    "qlik",
    "jquery",
    "text!./template.html",
    "css!./style.css"
], function (qlik, $, template) {
    'use strict';

    return {
        template: template,
        definition: {
            type: "items",
            component: "accordion",
            items: {
                settings: {
                    uses: "settings",
                    items: {
                        logButtonLabel: {
                            ref: "properties.logButtonLabel",
                            label: "Log App Data Button Label",
                            type: "string",
                            defaultValue: "Log App Data to Console"
                        }
                    }
                }
            }
        },
        support: {
            snapshot: true,
            export: true,
            exportData: false
        },
        paint: function ($element, layout) {
            var self = this;
            var app = qlik.currApp(this);

            // Get properties from the definition
            var logButtonLabel = layout.properties.logButtonLabel || "Log App Data to Console";

            // Function to fetch and log app data
            function fetchAndLogAppData() {
                app.getInfo().then(function (appInfo) {
                    var appId = appInfo.qAppId;

                    // Use qlik.Promise to ensure proper context
                    qlik.Promise.resolve().then(function() {
                        return qlik.getGlobal();
                    }).then(function(global) {
                        return global.openDoc(appId);
                    }).then(function(app) {
                        // Get all objects in the app
                        return app.getObjects().then(function(objects) {
                            const appData = {
                                appId: appId,
                                objects: []
                            };

                            // Iterate over the objects
                            const objectPromises = objects.map(function(object) {
                                return app.getObject(object.qId)
                                    .then(function(obj) {
                                        return obj.getProperties()
                                            .then(function(properties) {
                                                const objectData = {
                                                    id: object.qId,
                                                    type: properties.qInfo.qType,
                                                    properties: properties,
                                                    data: null // Placeholder for data
                                                };

                                                // Get data for list objects
                                                if (properties.qInfo.qType === 'listbox') {
                                                    const listObjectDef = {
                                                        qDef: {
                                                            qFieldDefs: [properties.qListObjectDef.qFieldDefs[0]]
                                                        },
                                                        qInitialDataFetch: [{
                                                            qTop: 0,
                                                            qLeft: 0,
                                                            qHeight: 100, // Adjust as needed
                                                            qWidth: 1
                                                        }]
                                                    };
                                                    return obj.getListObjectData('qListObject', [listObjectDef])
                                                        .then(function (listObjectData) {
                                                            objectData.data = listObjectData[0].qMatrix;
                                                            return objectData;
                                                        });
                                                }
                                                // Get data for hypercube objects (charts)
                                                else if (properties.qInfo.qType === 'visualization') {
                                                    const hypercubeDef = properties.qHyperCubeDef;
                                                    hypercubeDef.qInitialDataFetch = [{
                                                        qTop: 0,
                                                        qLeft: 0,
                                                        qHeight: 100, // Adjust as needed
                                                        qWidth: 10 // Adjust as needed
                                                    }];
                                                    return obj.getHyperCubeData('/qHyperCubeDef', [hypercubeDef.qInitialDataFetch[0]])
                                                        .then(function (hypercubeData) {
                                                            objectData.data = hypercubeData[0].qMatrix;
                                                            return objectData;
                                                        });
                                                }
                                                else {
                                                    return objectData;
                                                }
                                            });
                                    });
                            });

                            return Promise.all(objectPromises)
                                .then(function (objectData) {
                                    appData.objects = objectData;
                                    console.log("App Data:", JSON.stringify(appData, null, 2)); // Log the JSON
                                    $element.html("<pre>" + JSON.stringify(appData, null, 2) + "</pre>"); // Display the JSON
                                    return appData;
                                });
                        });
                    });
                });
            }

            // Create the button
            var buttonId = "log-app-data-" + self.options.id;
            var $button = $(`<button id="${buttonId}" class="qui-button">${logButtonLabel}</button>`);

            // Button click handler
            $button.on("click", function () {
                fetchAndLogAppData();
            });

            // Append the button to the element
            $element.html($button);

            return qlik.Promise.resolve();
        }
    };
});
