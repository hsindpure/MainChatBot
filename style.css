define([
    'jquery',
    'qlik',
    './properties',
    'text!./template.html',
    'text!./style.css',
    'enigma' // Assuming you've included Enigma.js
], function($, qlik, props, template, cssContent, enigma) {
    'use strict';

    return {
        definition: props,
        template: template,
        paint: function($element, layout) {
            const appId = layout.props.appId; // Assuming you have an appId property

            // Qlik Sense Engine configuration
            const config = {
                host: layout.props.host, // Assuming you have a host property
                port: layout.props.port, // Assuming you have a port property
                isSecure: layout.props.isSecure, // Assuming you have an isSecure property
                prefix: layout.props.prefix, // Assuming you have a prefix property
                appId: appId
            };

            // Connect to the Qlik Sense Engine
            enigma.getService(config).then(function(service) {
                return service.open()
                    .then(function(global) {
                        return global.openDoc(appId);
                    })
                    .then(function(app) {
                        // Get all objects in the app
                        return app.getObjects()
                            .then(function(objects) {
                                const appData = {
                                    appId: appId,
                                    objects: []
                                };

                                // Iterate over the objects
                                const objectPromises = objects.map(function(object) {
                                    return app.getObject(object.qId)
                                        .then(function(obj) {
                                            return obj.getProperties()
                                                .then(function(properties) {
                                                    const objectData = {
                                                        id: object.qId,
                                                        type: properties.qInfo.qType,
                                                        properties: properties,
                                                        data: null // Placeholder for data
                                                    };

                                                    // Get data for list objects
                                                    if (properties.qInfo.qType === 'listbox') {
                                                        const listObjectDef = {
                                                            qDef: {
                                                                qFieldDefs: [properties.qListObjectDef.qFieldDefs[0]]
                                                            },
                                                            qInitialDataFetch: [{
                                                                qTop: 0,
                                                                qLeft: 0,
                                                                qHeight: 100, // Adjust as needed
                                                                qWidth: 1
                                                            }]
                                                        };
                                                        return obj.getListObjectData('qListObject', [listObjectDef])
                                                            .then(function(listObjectData) {
                                                                objectData.data = listObjectData[0].qMatrix;
                                                                return objectData;
                                                            });
                                                    }
                                                    // Get data for hypercube objects (charts)
                                                    else if (properties.qInfo.qType === 'visualization') {
                                                        const hypercubeDef = properties.qHyperCubeDef;
                                                        hypercubeDef.qInitialDataFetch = [{
                                                            qTop: 0,
                                                            qLeft: 0,
                                                            qHeight: 100, // Adjust as needed
                                                            qWidth: 10 // Adjust as needed
                                                        }];
                                                        return obj.getHyperCubeData('/qHyperCubeDef', [hypercubeDef.qInitialDataFetch[0]])
                                                            .then(function(hypercubeData) {
                                                                objectData.data = hypercubeData[0].qMatrix;
                                                                return objectData;
                                                            });
                                                    }
                                                    else {
                                                        return objectData;
                                                    }
                                                });
                                        });
                                });

                                return Promise.all(objectPromises)
                                    .then(function(objectData) {
                                        appData.objects = objectData;
                                        console.log("App Data:", JSON.stringify(appData, null, 2)); // Log the JSON
                                        return appData;
                                    });
                            });
                    });
            }).catch(function(error) {
                console.error("Error connecting to Qlik Sense Engine:", error);
            });

            return qlik.Promise.resolve();
        }
    };
});
