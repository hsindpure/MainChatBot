const enigma = require('enigma.js');
const WebSocket = require('ws');
const fs = require('fs');

// IMPORTANT: Replace with the correct schema version for your Qlik Sense environment.
const schema = require('enigma.js/schemas/12.612.0'); // Example for Qlik Sense June 2024 Release

// Configuration for connecting to the Qlik Sense Engine API.
const config = {
  schema,
  url: 'ws://localhost:4848/app/', // Use the correct WebSocket URI for your environment.
  createSocket: url => new WebSocket(url, { rejectUnauthorized: false }), // Set to true for production with valid certificates.
  // Add authentication details if necessary (e.g., certificate paths for Qlik Sense Enterprise).
  // cert: fs.readFileSync('path/to/client.pem'),
  // key: fs.readFileSync('path/to/client_key.pem'),
  // ca: fs.readFileSync('path/to/root.pem'),
};

async function getAppDetailsAsJson(appId) {
  const appData = {};

  try {
    // 1. Establish a session and open the Qlik Sense app.
    const session = enigma.create(config);
    const global = await session.open();
    const app = await global.openDoc(appId);

    // 2. Get the app layout.
    appData.layout = await app.getLayout();

    // 3. Get the app's load script.
    appData.loadScript = await app.getScript();

    // 4. Get a list of dimensions and measures (optional).
    appData.dimensions = await app.getDimensionList();
    appData.measures = await app.getMeasureList();

    // 5. Get a list of sheets and master objects.
    appData.sheets = [];
    const sheets = await app.getObjects({ qType: 'sheet' }); // Get all sheets.
    for (const sheet of sheets) {
      const sheetInfo = {
        id: sheet.qInfo.qId,
        name: sheet.qMeta.title,
        objects: [],
      };

      // Get objects within each sheet (e.g., visualizations).
      const sheetLayout = await app.getObject(sheet.qInfo.qId).getLayout();
      for (const object of sheetLayout.qChildren) {
        const objectInfo = {
          id: object.qInfo.qId,
          type: object.qInfo.qType,
          properties: await app.getObject(object.qInfo.qId).getProperties(), // Get object properties.
        };

        // You can add more logic here to extract data from visualizations,
        // using `exportData()` or other methods, depending on your needs.
        // This is a complex step and requires handling various object types and data formats.
        // Example for getting chart data (requires downloading a file):
        // if (object.qInfo.qType === 'chart') {
        //   const exportResult = await app.getObject(object.qInfo.qId).exportData('OOXML');
        //   objectInfo.dataExportUrl = `http://localhost:4848${exportResult.qUrl}`;
        // }

        sheetInfo.objects.push(objectInfo);
      }
      appData.sheets.push(sheetInfo);
    }

    // 6. Close the Qlik Sense app and session.
    await app.close();
    await session.close();

  } catch (error) {
    console.error('Error extracting app data:', error);
  }

  return appData;
}

// Example Usage:
const appId = 'your-app-id'; // Replace with the actual Qlik Sense app ID or name.
getAppDetailsAsJson(appId)
  .then(data => {
    fs.writeFileSync('qliksense_app_data.json', JSON.stringify(data, null, 2)); // Save the data to a JSON file.
    console.log('App data saved to qliksense_app_data.json');
  })
  .catch(error => console.error('Error:', error));
